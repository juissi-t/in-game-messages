# -*- coding: utf-8 -*-
"""Discord Messaging module and for sending in-game messages to Discord."""

import logging
import re
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple

import discord

from .mbox import Mbox


class DiscordMessaging(discord.Client):
    """A class used to parse in-game messages and send them to Discord."""

    def __init__(
        self,
        discord_channel_id: int,
        discord_user_ids: Optional[List[int]],
        game_id: str,
        messages: List,
        *args,
        **kwargs,
    ) -> None:
        """Class constructor."""
        super().__init__(*args, **kwargs)
        self.discord_channel_id = discord_channel_id
        self.discord_user_ids = discord_user_ids
        self.game_id = game_id
        self.messages = messages
        self.logger = logging.getLogger(__name__)

    async def on_ready(self):
        """Send new in-game messages to Discord when connected."""
        await self.send_new_messages_to_discord(self.messages, self.game_id)
        await self.close()

    async def send_discord_message(
        self,
        channel: discord.TextChannel,
        msg: Dict,
        parent: Optional[Dict] = None,
        parent_msg: Optional[discord.Message] = None,
        parent_thread: Optional[discord.Thread] = None,
    ) -> Tuple[discord.Message, Optional[discord.Thread]]:
        """Send Discord message to the configured channel."""
        embed = self.construct_discord_message(msg)

        try:
            if not parent_msg:
                discord_msg = await channel.send(embed=embed)
                return discord_msg, None

            if not parent_thread:
                parent_thread = self.get_channel(parent_msg.id)  # type: ignore

                if not parent_thread:
                    self.logger.debug(
                        "No thread found for Discord msg ID %s, creating new thread",
                        parent_msg.id,
                    )

                    thread_name = f'Turn {parent["turn"]} - {parent["sender"]["name"]}'  # type: ignore # noqa
                    parent_message = await channel.fetch_message(parent_msg.id)
                    parent_thread = await parent_message.create_thread(name=thread_name)
                    if self.discord_user_ids:
                        for user_id in self.discord_user_ids:
                            user = await self.get_or_fetch_user(user_id)
                            await parent_thread.add_user(user)  # type: ignore

            discord_msg = await parent_thread.send(embed=embed)
            return discord_msg, parent_thread

        except discord.ClientException as err:
            self.logger.error("Error posting message: %s", err)
            raise

    async def send_new_messages_to_discord(
        self, messages: List, planets_game_id: str, mbox_path: Optional[Path] = None
    ) -> None:
        """Fetch messages from a game and send new ones to Discord."""
        if not mbox_path:
            mbox_path = Path(f"messages-{planets_game_id}.mbox")
        mbox = Mbox(mbox_path)
        message_ids = mbox.get_message_ids()

        discord_channel = self.get_channel(self.discord_channel_id)  # type: ignore

        for msg in messages:
            parent_msg: Optional[discord.Message]
            # Check that we haven't sent the message earlier, and filter out
            # some spammy messages generated by the system.
            if msg["msgid"] not in message_ids:
                if not (
                    msg["sourcename"] == msg["gamename"]
                    and len(msg["replies"]) == 0
                    and re.search(
                        "joined the game in slot|earned the award", msg["message"]
                    )
                ):
                    # Let's not overwhelm Discord API
                    time.sleep(2)

                    # Construct a Discord message and send it to the channel
                    parent_msg, _ = await self.send_discord_message(
                        discord_channel,  # type: ignore
                        msg,
                    )

                    if parent_msg:
                        self.logger.info(
                            "Message %s sent to Discord successfully.", msg["msgid"]
                        )
                        if mbox.save_email_message(msg, str(parent_msg.id)):
                            message_ids[msg["msgid"]] = parent_msg.id
            else:
                self.logger.debug("Message %s already sent.", msg["msgid"])
                try:
                    parent_msg = await discord_channel.fetch_message(  # type: ignore
                        message_ids[msg["msgid"]],
                    )
                except discord.errors.NotFound:
                    self.logger.error(
                        "Message not found from Discord, not sending replies"
                    )
                    continue
                time.sleep(2)

            discord_thread: Optional[discord.Thread] = None
            for reply in sorted(msg["replies"], key=lambda x: x["dateadded"]):
                if reply["msgid"] not in message_ids:
                    # Let's not overwhelm Discord API
                    time.sleep(2)

                    # Construct a Discord thread reply and send it
                    discord_reply, discord_thread = await self.send_discord_message(
                        discord_channel,  # type: ignore
                        reply,  # Message as Dict
                        msg,  # Parent message as Dict
                        parent_msg,  # Parent message as Discord message
                        discord_thread,
                    )

                    if discord_reply:
                        self.logger.info(
                            "Reply %s (parent %s) sent to Discord successfully.",
                            reply["msgid"],
                            msg["msgid"],
                        )
                        if mbox.save_email_message(
                            reply,
                            str(discord_thread.id),  # type: ignore
                        ):
                            message_ids[reply["msgid"]] = parent_msg.id  # type: ignore
                else:
                    self.logger.debug(
                        "Reply %s (parent %s) already sent.",
                        reply["msgid"],
                        msg["msgid"],
                    )

    @staticmethod
    def construct_discord_message(message: Dict) -> discord.Embed:
        """Construct a Discord embed message from an in-game message."""
        icon = message["sender"]["icons"]["league"]
        if message["sender"]["icons"]["race"]:
            icon = message["sender"]["icons"]["race"]
        elif message["sender"]["icons"]["player"]:
            icon = message["sender"]["icons"]["player"]

        embed = discord.Embed(
            timestamp=datetime.strptime(message["dateadded"], "%Y-%m-%dT%H:%M:%S"),
            title=f'***Turn {message["turn"]}***',
            description=message["message"].replace("<br/>", "\n")[:4095],
        )
        embed.set_author(
            name=message["sender"]["name"],
            icon_url=icon,
        )
        embed.add_field(name="To", value=", ".join(message["recipients"].keys()))

        return embed
