"""Export in-game messages to different formats."""

import csv
import logging
from pathlib import Path
from typing import List

from .mbox import Mbox


class Exporting:
    """A class to export messages for a game from planets.nu."""

    def __init__(self) -> None:
        """Class constructor."""
        super().__init__()
        self.logger = logging.getLogger(__name__)

    def to_csv(self, messages: List, csv_path: Path) -> None:
        """Export messages to a CSV file."""
        fieldnames = [
            "game_id",
            "message_id",
            "parent_id",
            "turn",
            "datetime",
            "sender",
            "recipients",
            "message",
        ]
        with open(csv_path, "w", newline="", encoding="utf-8") as csvfile:
            self.logger.debug("Writing messages to CSV file %s", str(csv_path))
            msgwriter = csv.DictWriter(
                csvfile,
                dialect="excel",
                fieldnames=fieldnames,
                quoting=csv.QUOTE_MINIMAL,
            )
            msgwriter.writeheader()
            for msg in messages:
                msgwriter.writerow(
                    {
                        "game_id": msg["gameid"],
                        "message_id": msg["id"],
                        "parent_id": 0,
                        "turn": msg["turn"],
                        "datetime": msg["dateadded"],
                        "sender": msg["sourcename"],
                        "recipients": ", ".join(msg["recipients"].keys()),
                        "message": msg["message"].replace("<br/>", "\r\n"),
                    }
                )
                for reply in sorted(msg["replies"], key=lambda x: x["dateadded"]):
                    msgwriter.writerow(
                        {
                            "game_id": reply["gameid"],
                            "message_id": reply["id"],
                            "parent_id": msg["id"],
                            "turn": reply["turn"],
                            "sender": reply["sourcename"],
                            "recipients": ", ".join(reply["recipients"].keys()),
                            "message": reply["message"].replace("<br/>", "\r\n"),
                        }
                    )

    def to_mbox(self, messages: List, mbox_path: Path) -> None:
        """Export messages to a mbox file."""
        mbox = Mbox(mbox_path)
        message_ids = mbox.get_message_ids()

        self.logger.debug("Writing messages to mbox %s", str(mbox_path))
        for msg in messages:
            # Check that we haven't sent the message earlier, and filter out
            # some spammy messages generated by the system.
            if msg["msgid"] not in message_ids:
                mbox.save_email_message(msg)
                self.logger.debug("Wrote message %s", msg["msgid"])
                message_ids[msg["msgid"]] = True

            for reply in sorted(msg["replies"], key=lambda x: x["dateadded"]):
                if reply["msgid"] not in message_ids:
                    mbox.save_email_message(reply)
                    self.logger.debug(
                        "Wrote reply %s (parent %s)", reply["msgid"], msg["msgid"]
                    )
                    message_ids[reply["msgid"]] = True
